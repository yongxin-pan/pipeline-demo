#!/usr/bin/env groovy

pipeline {
  agent { label 'master' }
  triggers {
    	pollSCM('H/1 9-20 * * 1-5')  // scm polling cron    
  }
  environment {
      	BRANCH_NAME = 'release2.0-20160907'  
      	BUILD_NUMBER = '#1'
  }
  parameters {
	string(name: 'BRANCH_NAME', defaultValue: 'master', description: 'branch name')
        string(name: 'BUILD_NUM', defaultValue: '1.0.0', description: 'build number')
	booleanParam(name: "DEBUG_MODE", defaultValue: true, description: '')
  }
	
  stages {
	stage('Build') {
	  steps {
		echo "Building.. PARAMETERS: ${params.BRANCH_NAME}.${params.BUILD_NUM}"
	  }
	}
	stage('Version Handling') {
      steps {
		script {
		  try {  
    		  if (binding.variables.get() != 'release') {		
    			def version = null
    			branch = ("branch-${env.BUILD_NUMBER}-${env.BRANCH_NAME}" =~ /\\|\/|:|"|<|>|\||\?|\*|\-|\#|\./).replaceAll("_")
    			version = "0.0.0-${branch}"
    			echo "version: ${version}"
                writeFile([file: 'version.txt', text: version])
                archive('version.txt')
		      }
		  } catch (Exception e) {
		     echo 'i am in catch exception!'; // to wrap exception so that the build will not marked as failed
		  }    
		}
	  }
	}		
	stage('Deploy') {
		steps {
			echo 'Deploy..'
		}
	}
  }
  post {
    always {
        echo 'One way or another, I have finished'
        deleteDir() /* clean up our workspace */
    }
    success {
        echo 'I succeeeded!'
    }
    unstable {
        echo 'I am unstable :/'
    }
    failure {
        echo 'I failed :('
    }
    changed {
        echo 'Things were different before...'
    }
  }  
}
